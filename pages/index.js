import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import React, { useState, useEffect, useRef } from "react";

export const VaseList = [
  [1, "Red Vase", "Vase Subtext", "Vase Thumbnail"],
  [2, "White Vase", "Vase Subtext", "Vase Thumbnail"],
  [3, "Yellow Vase", "Vase Subtext", "Vase Thumbnail"]
];

export const FlowerList = [
  [
    [
      1,
      "Flower One",
      "Flower Description",
      "Flower Thumbnail"
    ],
    [
      2,
      "Flower Two",
      "Flower Description",
      "Flower Thumbnail"
    ],
    [
      3,
      "Flower Three",
      "Flower Description",
      "Flower Thumbnail"
    ]
  ],
  [
    [
      1,
      "Flower One",
      "Flower Description",
      "Flower Thumbnail"
    ],
    [
      2,
      "Flower Two",
      "Flower Description",
      "Flower Thumbnail"
    ],
    [
      3,
      "Flower Three",
      "Flower Description",
      "Flower Thumbnail"
    ]
  ],
  [
    [
      1,
      "Flower One",
      "Flower Description",
      "Flower Thumbnail"
    ],
    [
      2,
      "Flower Two",
      "Flower Description",
      "Flower Thumbnail"
    ],
    [
      3,
      "Flower Three",
      "Flower Description",
      "Flower Thumbnail"
    ]
  ]
];

export default function Home() {
  const [vase, setVase] = useState([]);


  const [fillers, setFillers] = useState([]);
  const [foliage, setFoliage] = useState([]);
  const [focal, setFocal] = useState([]);
  const flowersSelected = [fillers, foliage, focal];

  const [noteGifter, setNoteGifter] = useState("");

  const [noteContent, setNoteContent] = useState("");

  const [noteRecipient, setNoteRecipient] = useState("");

  const [noteChoice, setNoteChoice] = useState(true);
  
  const note = [noteContent, noteGifter];


  const [step, setStep] = useState(1);
  const [URL, setURL] = useState();

  const URLGeneration = () => {
    const Content = [vase, flowersSelected.join('-'), note.join('-')]
    const ContentSpaced = Content.join('_')
    console.log(ContentSpaced)
    setStep(4)
    setURL(ContentSpaced)
    return ContentSpaced
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Creating a gift</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1>
          Giving Giraffe
        </h1>
        <h3>
          Personalized Digital Gifting
        </h3>
        {step == 1 ? (
        <div className={styles.step}>
          
          <div className={styles.information}>
            <p>Step One</p>
            <h2>Select a vase</h2>
            <p> 
              The vase is an important often overlooked component of the
              flowering arrangement process. Be sure to choose wisely for
              the wrong vase may convey the wrong message. 
            </p>

            {VaseList && VaseList.map((vaseArray, i) => (
            
            <div onClick={() => {
              setVase(vaseArray[0])
              console.log(vase)
              }}>
              {vase == i + 1 ? (
              <strong>{vaseArray[1]}</strong> ) : <p>{vaseArray[1]}</p>}
              <p>{vaseArray[2]}</p> 
            </div>
            ))}

          </div>
        </div>) : 
        (null)
        }

        {step == 2 ? (
        <div className={styles.step}>
          
          <div className={styles.information}>
            <p>Step Two</p>
            
            <h2>Select Flowers</h2>
            <p> 
              Select the flowers for your gift
            </p>
            {FlowerList && FlowerList.map((layerOfFlowers, layerIndex) => (
              layerOfFlowers && layerOfFlowers.map((flower, flowerIndex) => (

              
            <div onClick={() => {
              //setFlowers(flowers.splice(layerIndex, 1, flowers[layerIndex].push(FlowerList[layerIndex][flowerIndex][0])))
              if (layerIndex == 0) {
                //setFillers(oldArray => [...oldArray, flowerIndex])
                setFillers(flowerIndex)
                console.log(flowersSelected)
              } else if (layerIndex == 1) {
                //setFoliage(oldArray => [...oldArray, flowerIndex])
                setFoliage(flowerIndex)
                console.log(flowersSelected)
              } else if (layerIndex == 2) {
                setFocal(flowerIndex)
                //setFocal(oldArray => [...oldArray, flowerIndex])
                console.log(flowersSelected)
              }
              }}>
                {(layerIndex == 0 && fillers == (flowerIndex)) || (layerIndex == 1 && foliage == flowerIndex) || (layerIndex == 2 && focal == flowerIndex) ? 
              (
              <div>
                <strong>{FlowerList[layerIndex][flowerIndex][1]}</strong>
                <p>{FlowerList[layerIndex][flowerIndex][2]}</p>
              </div>
              ) :
              (
              <div>
                <p>{FlowerList[layerIndex][flowerIndex][1]}</p>
                <p>{FlowerList[layerIndex][flowerIndex][2]}</p>
              </div>
              )} 
            </div>
              ))
            ))}
          </div>
        </div>) : 
        (null)
        }

        {step == 3 ? 
        (
          <div className={styles.step}>
            <div className={styles.information}>
                <p>Step Three</p>
                <h2>Write a note</h2>
                <p> 
                  Optionally you can add a note to your gift
                </p>
                <div>
                  <input type="checkbox" 
                  defaultChecked={noteChoice}
                  onChange={() => setNoteChoice(!noteChoice)}
                  ></input>
                  <label>I would like to include a note</label>
                </div>
                
                {noteChoice ? (
                  <div>
                  <div>
                  <label for="fname">Their Name:</label>
                  <input onChange={(e) => {setNoteRecipient(btoa(e.target.value))
                  console.log(atob(noteRecipient))}}
                  type="text" id="fname" name="fname"></input>
                  </div>
                  <div>
                  <textarea onChange={(e) => {setNoteContent(btoa(e.target.value))
                console.log(atob(noteContent) ) 
                }}
                  placeholder="Type your message here..."
                  >

                  </textarea>
                  </div>
                  <div>
                  <label for="fname">Your Name: </label>
                  <input onChange={(e) => {setNoteGifter(btoa(e.target.value))
                  console.log(atob(noteGifter))}}
                  type="text" id="fname" name="fname"></input>
                  </div>
                  </div>
                ) : (
                  null
                  )} 
               
              </div>
            </div>
        ) : (null)}

        
        {step == 4 ? 
        (<div className={styles.step}>
          
        <div className={styles.information}>
          
          
          <h2>Thank you for gifting with Giving Giraffe</h2>

          <p> 
            Amet minim mollit non deserunt ullamco est sit aliqua dolor do amet sint. Velit officia consequat duis enim velit mollit. Exercitation veniam consequat sunt nostrud amet.
          </p>

          <text>http://GivingGiraffe.com/{URL}</text>
        </div>
        </div>) : null
          }

        <div className={styles.navigation}>
          {step !== 1 ? 
          (<button onClick={ () => setStep(step - 1) }>Previous</button>) : 
          (<button onClick={ () => setStep(step) }>Previous</button>)
          }
          {step !== 3 ? 
          (<button onClick={ () => setStep(step + 1) }>Next</button>) : 
          (<button onClick={ () => URLGeneration() }>Generate Gift</button>)
          }
        </div>
      </main>
    </div>
  )
}
